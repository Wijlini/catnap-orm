= Features =

 * Mapping is done via a fluent interface
 * Mapped entities inherit from IEntity interface
 * Mapped collections 
   * Automatic loading - lazy or eager as specified per collection
   * Automatic cascading - saves/updates and/or deletes as specified per collection
   * Filtering.  Specify a filter criteria for a collection
 * Control connection and transaction boundaries via a basic !UnitOfWork context
 * `Repository<T>` base class provides basic operations
 * `IFindSpec<T>` provides means to abstract find queries
 * !DbCommandSpec provides a way to create and execute any parameterized query (similar to IDbCommand)
 * Support for Linq predicates for finding and filtering collections (very limited at present)
 * Database migration utility. Provides automatic deployment of database changes based on migrations (forward only) that you write
 * No dependencies except sqlite3.dll

= sqlite3.dll =

The sqlite3.dll COM assembly must be in your application directory.

= Configuration =

Something like this at startup:

{{{
SessionFactory.Initialize("MyDatabase.sqlite");
DomainMap.Configure
(
    new EntityMap<Person>()
        .Property(x => x.Id)
        .Property(x => x.FirstName)
        .Property(x => x.LastName),
    new EntityMap<Forum>()
        .Property(x => x.Id)
        .Property(x => x.Name),
        .List(x => x.Posts)
    new EntityMap<Post>("ForumId")
        .Property(x => x.Id)
        .Property(x => x.Title)
        .Property(x => x.Body)
        .BelongsTo(x => x.Poster, "PosterId")
);
using (UnitOfWork.Start())
{
    DatabaseMigrator.Execute();
}
}}}

= IEntity =

Mapped entities must implement the IEntity interface.  Entities use an integer primary key  which is assumed to be auto-incremented by the database.

{{{
public interface IEntity
{
    int Id { get; }
    bool IsTransient { get; }
    void SetId(int id);
}
}}}

Catnap also provides a base class, Entity, which implements IEntity and provides the proper equality comparison.  This is for convenience and is not required.

= Usage =

== Get & Save ==

Below we fetch a forum, change its title, remove a post and add a post, then save the forum.  The Posts collection will be loaded lazily.  The adds/deletes to Posts will be cascaded when the forum is saved.  At the start of the using block a connection will be opened and a transaction started.  At the end of the using block the transaction will be committed (or rolled back in the case of an error) and the connection will be closed.

{{{
using (UnitOfWork.Start())
{
   var person = personRepository.Get(1);
   var forum = forumRepository.Get(1);
   forum.Title = "Annoying Complaints";
   forum.RemovePost(forum.Posts[0]);
   forum.AddPost(new Post { Title = "Please help!", Body "Now!", Person = person });
   forumRepository.Save(forum);
}
}}}

== Find ==

UNDER CONSTRUCTION

=== Parameterized SQL With !DbCommandSpec ===

UNDER CONSTRUCTION

= Priority To Add =

 * Automated tests.  Catnap started as an experimental project that has evolved into something useful.  While it was developed with loose coupling and testability in mind, TDD/BDD was not used.  Getting the code under test will be necessary to allow for change and growth
   * Unit tests, lots of unit tests
   * More integration tests
 * Session cache. Currently there is no caching of fetched entities, which creates a performance problem, specifically for for cascading.  Cascading currently must retrieve the entire persisted collection in order to synchronize changes.  Therefore, cascading is currently only appropriate for collections of a small size.
 * ...

UNDER CONSTRUCTION